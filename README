## Projet Django (blog)

## Etape 1 : Configuration

##### source :  open classroom ####

'''
~/→ mkdir fotoblog && cd fotoblog
~/fotoblog → python -m venv ENV
~/fotoblog → source ENV/bin/activate
(ENV) ~/fotoblog → pip install django
(ENV) ~/fotoblog → pip freeze > requirements.txt

(ENV) ~/fotoblog → django-admin startproject fotoblog .
(ENV) ~/fotoblog → python manage.py startapp authentication
(ENV) ~/fotoblog → python manage.py startapp blog
'''
# fotoblog/settings.py
'''
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentication',
    'blog',
]

LANGUAGE_CODE = 'fr-fr'
'''

'''
(ENV) ~/fotoblog → git init
(ENV) ~/fotoblog → echo ENV > .gitignore
(ENV) ~/fotoblog → echo __pycache__ >> .gitignore
(ENV) ~/fotoblog → echo db.sqlite3 >> .gitignore
(ENV) ~/fotoblog → # Vous pouvez ajouter d'autres fichiers et répertoires dans le .gitignore ici
(ENV) ~/fotoblog  → git add .
(ENV) ~/fotoblog  → git status
(ENV) ~/fotoblog  → git commit -m “initial commit”

'''

### ---Linux  ubuntu : ---

''' 
python -V
pip instal virtuelenv
virtualenv my_projet
cd ..
source ENV/bin/activate    | deactivate

pip install django==4.0
pip freeze > requirements.txt
'''

### ----Windows ----

'''
ENV\Scripts\activate
pip install django
django-admin startproject nom_de_votre_projet

cd nom_de_votre_projet
python manage.py runserver   (http://127.0.0.1:8000/)
pip freeze > requirements.txt
type requirements.txt (affiche le texte)

(ENV) ~/fotoblog → django-admin startproject fotoblog .
(ENV) ~/fotoblog → python manage.py startapp authentication
(ENV) ~/fotoblog → python manage.py startapp blog

'''

## -----Ajoutt de params----

# fotoblog/settings.py
'''
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentication',
    'blog',
]
LANGUAGE_CODE = 'fr-fr'
'''
## ----Configuration du compte github----

'''
git config --global user.name "VotreNom"
git config --global user.email "votre@email.com"

ssh-keygen -t rsa -b 4096 -C "votre@email.com"

# --------------------------------

git config --global user.name "saliouM"
git config --global user.email "mohamadou.m.saliou@gmail.com"
ssh-keygen -t rsa -b 4096 -C "mohamadou.m.saliou@gmail.com"  
passphrase : saliou123@M (ssh)

ssh -T git@github.com

(ENV) ~/fotoblog → git init
(ENV) ~/fotoblog → echo ENV > .gitignore
(ENV) ~/fotoblog → echo __pycache__ >> .gitignore
(ENV) ~/fotoblog → echo db.sqlite3 >> .gitignore
(ENV) ~/fotoblog → # Vous pouvez ajouter d'autres fichiers et répertoires dans le .gitignore ici
(ENV) ~/fotoblog  → git add .
(ENV) ~/fotoblog  → git status
(ENV) ~/fotoblog  → git commit -m “initial commit”

git remote add origin https://github.com/nom_utilisateur/nom_du_depot.git


## ---------or create a new repository on the command line------------------

echo "# My_App_Django" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/saliouM/My_App_Django.git
git push -u origin main

#-----------or push an existing repository from the command line----------------------

git remote add origin https://github.com/saliouM/My_App_Django.git
git branch -M main
git push -u origin main

'''

## Etape 2 : Creation d'un model user

# ----1 : Créez le modèle User  ----

# authentication/models.py
'''
from django.contrib.auth.models import AbstractUser
from django.db import models

class User(AbstractUser):
    
    CREATOR = 'CREATOR'
    SUBSCRIBER = 'SUBSCRIBER'

    ROLE_CHOICES = (
    (CREATOR, 'Créateur'),
    (SUBSCRIBER, 'Abonné'),
    )
    profile_photo = models.ImageField(verbose_name='Photo de profil')
    role = models.CharField(max_length=30, choices=ROLE_CHOICES, verbose_name='Rôle')
'''

## ---2 : Configurez Django pour utiliser un modèle User personnalisé---

# fotoblog/settings.py
'''
AUTH_USER_MODEL = 'authentication.User'
'''

## ----3 : Générez et exécutez les migrations initiales------

''' 
(ENV) ~/fotoblog (master)

(ENV) ~/fotoblog (master) → pip install Pillow
(ENV) ~/fotoblog (master) → pip freeze > requirements.txt

Génération des migrations :

(ENV) ~/fotoblog (master)
→ python manage.py makemigrations

Exécution des migrations :

(ENV) ~/fotoblog (master)
→ python manage.py migrate
'''

## Etape 3: Programmez la vue pour que les utilisateurs se connectent

# -----1 : Créez le LoginForm(formulaire de connexion)----
'''
(ENV) ~/fotoblog (master)
→ touch authentication/forms.py
type nul > authentication/forms.py (cmd)
'''

# --Dans ce fichier, créez le  LoginForm.--

# authentication/forms.py
'''
from django import forms

class LoginForm(forms.Form):
    username = forms.CharField(max_length=63, label='Nom d’utilisateur')
    password = forms.CharField(max_length=63, widget=forms.PasswordInput, label='Mot de passe')
'''

## ---2 : Créez la vue de la page de connexion---

# authentication/views.py
'''
from django.contrib.auth import login, authenticate # import des fonctions login et authenticate
from django.shortcuts import render
from . import forms

def login_page(request):
    form = forms.LoginForm()
    message = ''
    if request.method == 'POST':
        form = forms.LoginForm(request.POST)
        if form.is_valid():
            user = authenticate(
                username=form.cleaned_data['username'],
                password=form.cleaned_data['password'],
            )
            if user is not None:
                login(request, user)
                message = f'Bonjour, {user.username}! Vous êtes connecté.'
            else:
                message = 'Identifiants invalides.'
    return render(
        request, 'authentication/login.html', context={'form': form, 'message': message})
'''

'''
(ENV) ~/fotoblog (master)
→ mkdir -p  authentication/templates/authentication

(ENV) ~/fotoblog (master)
→ mkdir -p blog/templates/blog/

(ENV) ~/fotoblog (master)
→ mkdir templates
'''

# templates/base.html
'''
<html>
    <head>
        <title>FotoBlog</title>
    </head>
    <body>
        <h1>FotoBlog</h1>
        {% block content %}{% endblock content %}
    </body>
</html>
'''

# authentication/templates/authentication/login.html
''' 
{% extends 'base.html' %}
{% block content %}
    <p>{{ message }}</p>
    <form method="post">
        {{ form.as_p }}
        {% csrf_token %}
        <button type="submit" >Se connecter</button>
    </form>
{% endblock content %}
'''

# fotoblog/settings.py

'''
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR.joinpath('templates'), # <--- ajoutez cette ligne
            ],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
    },
]
'''

 #---4 : Ajoutez l’URL à urlpatterns----

'''
from django.contrib import admin
from django.urls import path
import authentication.views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', authentication.views.login_page, name='login'),
]
'''

# ---5 : Affichez la page de connexion---

'''
python manage.py runserver
http://localhost:8000

'''

## Etape 4 Testez la fonctionnalité de connexion et ajoutez la déconnexion

# ---1 : Créez un utilisateur--

''' 
from authentication.models import User
User.objects.create_user(username='toto', password='S3cret!', role='CREATOR')
'''




## ---3 : Créez une vue de déconnexion---
# authentication/views.py
''' 
from django.contrib.auth import authenticate, login, logout
from django.shortcuts import redirect, render
from . import forms

def logout_user(request):
    
    logout(request)
    return redirect('login')
    
def login_page(request):
'''

## ---4 : Ajouter la vue de déconnexion aux modèles d’URL---
# authentication/urls.py
#urlpatterns = [
#    path('logout/', authentication.views.logout_user, name='logout'),
#]


## ----5: Ajoutez le gabarit de déconnexion---
# templates/base.html
'''
<html>
        <head>
            <title>FotoBlog</title>
        </head>
        <body>
            <h1>FotoBlog</h1>
            {% block content %}{% endblock content %}
            {% if user.is_authenticated %}
                <p>Vous êtes connecté en tant que {{ request.user }}. <a href="{% url 'logout' %}">Se déconnecter</a></p>
            {% endif %}
        </body>
</html>

'''


## ---6 : Restreignez l’accès à une partie du site aux utilisateurs connectés uniquement--

# 1 : Ajoutez la vue
# blog/views.py
'''
def home(request):
    return render(request, 'blog/home.html')
'''
## ---2 : Ajoutez un gabarit---
# blog/templates/blog/home.html
'''
{% extends 'base.html' %}
{% block content %}
    <p>Vous êtes connecté !</p>
{% endblock content %}
'''

# ---3 : Ajoutez le modèle d’URL---
# urls.py
'''
import blog.views

urlpatterns = [
    ...
    path('home/', blog.views.home, name='home'),
]

'''

# ---4 : Configurez une redirection après connexion---

# views.py
#login 

'''
def login_page(request):
    form = forms.LoginForm()
    message = ''
    if request.method == 'POST':
        form = forms.LoginForm(request.POST)
        if form.is_valid():
            user = authenticate(
                username=form.cleaned_data['username'],
                password=form.cleaned_data['password'],
            )
            if user is not None:
                login(request, user)
                return redirect('home')
                #message = f'Bonjour, {user.username}! Vous êtes connecté.'
            else:
                message = 'Identifiants invalides.'
    return render(
        request, 'authentication/login.html', context={'form': form, 'message': message})
'''

#5 : Testez la connexion


#6 : Restreignez l’accès à la page d’accueil
# blog/views.py
'''
from django.contrib.auth.decorators import login_required


@login_required
def home(request):
    return render(request, blog/home.html')

# fotoblog/settings.py

LOGIN_URL = 'login'
'''

### Etape 5  : Créez une page de connexion avec des vues basées sur des classes

'''
from django.views.generic import View
class LoginPageView(View):
    template_name = 'authentication/login.html'
    form_class = forms.LoginForm

    def get(self, request):
        form = self.form_class()
        message = ''
        return render(request, self.template_name, context={'form': form, 'message': message})
        
    def post(self, request):
        form = self.form_class(request.POST)
        if form.is_valid():
            user = authenticate(
                username=form.cleaned_data['username'],
                password=form.cleaned_data['password'],
            )
            if user is not None:
                login(request, user)
                return redirect('home')
        message = 'Identifiants invalides.'
        return render(request, self.template_name, context={'form': form, 'message': message})
'''


# fotoblog/urls.py
'''
urlpatterns = [
    ...
    path('', authentication.views.LoginPageView.as_view(), name='login'),
    ...
]
'''

#  ---Implémentez la connexion avec des vues génériques---

#1- : Configurez les paramètres
# fotoblog/settings.py
'''
LOGIN_REDIRECT_URL = 'home'
'''

# --2-Ajoutez le modèle d’URL et la configuration de la vue--
# authentication/urls.py
'''
from django.contrib.auth.views import LoginView
    
urlpatterns = [
    path('', LoginView.as_view(
            template_name='authentication/login.html',
            redirect_authenticated_user=True),
        name='login'),
    path('logout/', authentication.views.logout_user, name='logout'),
]
'''

## Etape 6 : Ajoutez une page d’inscription


#  --1 : Spécialisez UserCreationForm--

# authentication/forms.py

'''
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm

class SignupForm(UserCreationForm):
    class Meta(UserCreationForm.Meta):
        model = get_user_model()
        fields = ('username', 'email', 'first_name', 'last_name', 'role')
'''

#2 : Ajoutez une vue d’inscription
# authentication/views.py
'''
from django.conf import settings
from django.contrib.auth import login
from django.shortcuts import redirect, render
from . import forms

def signup_page(request):
    form = forms.SignupForm()
    if request.method == 'POST':
        form = forms.SignupForm(request.POST)
        if form.is_valid():
            user = form.save()
            # auto-login user
            login(request, user)
            return redirect(settings.LOGIN_REDIRECT_URL)
return render(request, 'authentication/signup.html', context={'form': form})
'''
#3 : Configurez les gabarits
# authentication/templates/authentication/signup.html
'''
{% extends 'base.html' %}
{% block content %}
    <h2>Inscription</h2>
    {% if form.errors %}
        {{ form.errors }}
    {% endif %}
    <form method="post">
        {{ form.as_p }}
        {% csrf_token %}
        <button type="submit" >S’inscrire</button>
    </form>
{% endblock content %}
'''

# authentication/templates/authentication/login.html
'''
{% extends 'base.html' %}
{% block content %}
    <form method="post">
        {{ form.as_p }}
        {% csrf_token %}
        <button type="submit" >Se connecter</button>
    </form>
    <p>Pas encore membre ? <a href="{% url 'signup' %}">Inscrivez-vous maintenant !</a></p>
{% endblock content %}
'''

#4 : Ajoutez le modèle d’URL
# fotoblog/urls.py
'''
urlpatterns = [
    ...
    path('signup/', authentication.views.signup_page, name='signup'),
]
'''

## Etape 7 : Personnalisez la validation de mot de passe

#---1 : Créez les validateurs----
# créez un nouveau fichier nommé   validators.py 

# authentication/validators.py
'''
from django.core.exceptions import ValidationError

class ContainsLetterValidator:
    def validate(self, password, user=None):
        if not any(char.isalpha() for char in password):
            raise ValidationError(
                'Le mot de passe doit contenir une lettre', code='password_no_letters')
                
    def get_help_text(self):
        return 'Votre mot de passe doit contenir au moins une lettre majuscule ou minuscule.'
'''

#  2 : Configurez les paramètres pour utiliser le validateur personnalisé

'''
# fotoblog/settings.py  
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'authentication.validators.ContainsLetterValidator',
    },
]

# fotoblog/settings.py  | configuration initial django sur les mots de passe
 {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
'''

## Etape 8 : Créez un service de mise en ligne des images

#Ajoutez les modèles du blog et des photos

# blog/models.py
'''
from django.conf import settings
from django.db import models


class Photo(models.Model):
    image = models.ImageField()
    caption = models.CharField(max_length=128, blank=True)
    uploader = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    date_created = models.DateTimeField(auto_now_add=True)

class Blog(models.Model):
    photo = models.ForeignKey(Photo, null=True, on_delete=models.SET_NULL, blank=True)
    title = models.CharField(max_length=128)
    content = models.CharField(max_length=5000)
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    date_created = models.DateTimeField(auto_now_add=True)
    starred = models.BooleanField(default=False)

'''

# ajout de 
#Gestion de telechargement des photo
#blog/views.py
''' 
@login_required
def photo_upload(request):
    form=forms.PhotoForm()
    if request.method == 'POST':
        form=forms.PhotoForm(request.POST, request.FILES)
        photo=form.save(commit=False)
        photo.uploader= request.user
        photo.save()
        return redirect('home')
    return render(request,'blog/photo_upload.html', context={'form':form})


@login_required
                  
def home(request):
    photos=models.Photo.objects.all()
    return render(request, 'blog/home.html', context={'photo': photos})
'''


# Ajout du Gabari (formulaire html)
''' 
{% extends 'base.html' %}
{% block content %}
    <h2>Télécharger une photo</h2>

    <form method="post" enctype="multipart/form-data">
        {{ form.as_p }}
        {% csrf_token %}
        <button type="submit" >Publier</button>
    </form>
{% endblock content %}
'''

# ajout du chemin dans urls


### Générons et exécutons les migrations ###
""" 
(ENV) ~/fotoblog (master)
→ python manage.py makemigrations
(ENV) ~/fotoblog (master)
→ python manage.py migrate
"""

## Etape 9: Mettez en ligne des images avec un formulaire

# -- 1 : Configurezsettings.py--

# fotoblog/settings.py
'''
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR.joinpath('media/')
'''

#----2 : Ajoutez les médias aux modèles d’URL---

# fotoblog/urls.py
'''
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    ...
    ]
if settings.DEBUG:
    urlpatterns += static(
        settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

'''

#Attention
'''
Cette méthode n’est adaptée que dans un environnement de développement. Sur un site en production, paramétrez  settings.DEBUGsurFalseet implémentez un processus de stockage des médias plus sophistiqué. Habituellement, cela implique de configurer le serveur web pour qu’il serve le média directement, ou qu’il mette en ligne le média à un fournisseur de stockage tiers.
'''

#3 : Créez un formulaire capable de gérer les mises en ligne d’images

# blog/forms.py
'''
from django import forms

from . import models

class PhotoForm(forms.ModelForm):
    class Meta:
        model = models.Photo
        fields = ['image', 'caption']
'''

# 4 : Construisez la vue pour qu’elle gère les téléversements d’images

# blog/views.py

'''
from django.shortcuts import redirect, render

from . import forms

@login_required
def photo_upload(request):
    form = forms.PhotoForm()
    if request.method == 'POST':
        form = forms.PhotoForm(request.POST, request.FILES)
        if form.is_valid():
            photo = form.save(commit=False)
            # set the uploader to the user before saving the model
            photo.uploader = request.user
            # now we can save
            photo.save()
            return redirect('home')
    return render(request, 'blog/photo_upload.html', context={'form': form})
'''

#5 : Ajoutez le gabarit

# blog/templates/blog/photo_upload.html
'''
{% extends 'base.html' %}
{% block content %}
    <h2>Télécharger une photo</h2>
    <form method="post" enctype="multipart/form-data">
        {{ form.as_p }}
        {% csrf_token %}
        <button type="submit" >Publier</button>
    </form>
{% endblock content %}

'''

#6 : Mettez à jour les modèles d’URL

'''
# fotoblog/urls.py
import blog.views

urlpatterns = [
    ...
    path('photo/upload/', blog.views.photo_upload, name='photo_upload')
]
'''

#7 : Créez un flux, ou « feed »

'''
# blog/views.py
from . import models

@login_required
def home(request):
    photos = models.Photo.objects.all()
    return render(request, 'blog/home.html', context={'photos': photos})
'''

# 
# blog/templates/blog/home.html
'''
# blog/templates/blog/home.html
{% extends 'base.html' %}
{% block content %}
    <h2>Photos</h2>
    {% for photo in photos %}
        <img src="{{ photo.image.url }}">
        <p>{{ photo.caption }}</p>
    {% endfor %}
{% endblock content %}
'''
#
'''path('photo/upload/', blog.views.photo_upload, name='photo_upload'),
'''


# Edit profile
'''
#base.html
{% load static %}
<html>
    <head>
        <title>FotoBlog</title>
        <link rel="stylesheet" href="{% static 'app.css' %}">
    </head>
    <body>
        <div class="sidebar">
            <h1>FotoBlog</h1>
            {% if user.is_authenticated %}
                <p>Salut, {{ user }} !</p>
                <img class="avatar" src="{% static 'images/default_profile.png'%}">
                <p><a href="{% url 'home' %}">Accueil</a></p>
                <p><a href="{% url 'photo_upload' %}">Téléverser une photo</a></p>
                <p><a href="">Changer la photo de profil</a></p>
                <p><a href="{% url 'password_change' %}">Changer le mot de passe</a></p>
                <p><a href="{% url 'logout' %}">Se déconnecter</a></p>
            {% endif %}
        </div>
        <div class="main">
            {% block content %}{% endblock content %}
        </div>
    </body>
</html>
'''


'''


def (request):
    photos=models.Photo.objects.all()
    return render(request, 'blog/home.html', context={'photo': photos})
    



    '''









#sources : Documentation
#https://docs.djangoproject.com/fr/3.2/howto/static-files/  (fichier static)
#https://docs.djangoproject.com/en/5.0/topics/forms/  (formulaire)





'''


# blog/models.py
from django.conf import settings
from django.db import models


class Photo(models.Model):
    image = models.ImageField()
    caption = models.CharField(max_length=128, blank=True)
    uploader = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    date_created = models.DateTimeField(auto_now_add=True)

class Blog(models.Model):
    photo = models.ForeignKey(Photo, null=True, on_delete=models.SET_NULL, blank=True)
    title = models.CharField(max_length=128)
    content = models.CharField(max_length=5000)
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    date_created = models.DateTimeField(auto_now_add=True)
    starred = models.BooleanField(default=False)


    '''

### Créez plusieurs modèles avec un seul formulaire

#1 : Créez les formulaires
'''
Pour permettre aux utilisateurs d’instancier plusieurs modèles simultanément, il vous faut un formulaire pour chacun des modèles  Photo  et  Blog
'''

'''
# blog/forms.py
from django import forms

from . import models


class PhotoForm(forms.ModelForm):
    ...


class BlogForm(forms.ModelForm):
    class Meta:
        model = models.Blog
        fields = ['title', 'content']
'''



'''
# blog/templates/blog/create_blog_post.html
{% extends 'base.html' %}
{% block content %}
    <h2>Écrire un billet</h2>
    <form method="post" enctype="multipart/form-data">
        {{ blog_form.as_p }}
        {{ photo_form.as_p }}
        {% csrf_token %}
        <button type="submit" >Publier</button>
    </form>
{% endblock content %}

'''

##  3 : Écrivez la vue

'''
# blog/views.py
@login_required
    def blog_and_photo_upload(request):
    blog_form = forms.BlogForm()
    photo_form = forms.PhotoForm()
    if request.method == 'POST':
        # handle the POST request here
    context = {
        'blog_form': blog_form,
        'photo_form': photo_form,
}
return render(request, 'blog/create_blog_post.html', context=context)

'''

'''
# blog/forms.py
@login_required
def blog_and_photo_upload(request):
    blog_form = forms.BlogForm()
    photo_form = forms.PhotoForm()
    if request.method == 'POST':
        blog_form = forms.BlogForm(request.POST)
        photo_form = forms.PhotoForm(request.POST, request.FILES)
        if all([blog_form.is_valid(), photo_form.is_valid()]):
            blog_form.save()
            photo_form.save()
    context = {
        'blog_form': blog_form,
        'photo_form': photo_form,
}
return render(request, 'blog/create_blog_post.html', context=context)
'''

## 4 : Ajoutez le modèle d’URL

# fotoblog/urls.py
'''
# fotoblog/urls.py
urlpatterns = [
    …
    path('blog/create', blog.views.blog_and_photo_upload, name='blog_create'),
]'''

##  5 : Ajoutez « Écrire un billet » à la barre latérale

# templates/base.html
'''
# templates/base.html
...
<p><a href="{% url 'home' %}">Accueil</a></p>
<p><a href="{% url 'blog_create' %}">Écrire un billet</a></p>
<p><a href="{% url 'photo_upload' %}">Télécharger une photo</a></p>
...

'''

''' methode pour redimmensionné les images
class Photo(models.Model):
    image = models.ImageField()
    caption = models.CharField(max_length=128, blank=True)
    uploader = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    date_created = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        img = Image.open(self.image.path)

        if img.heigth > 300 or img.weight > 300:
            output_size = (300,300)
            img.thumbnail(output_size)
            img.save(self.image.path)

'''

## Etape : Ajoutez une page de visualisation d’un billet de blog

# 1 : Ajoutez la vue pour la page de visualisation d’un billet

'''
# blog/views.py

from django.shortcuts import get_object_or_404
@login_required
def view_blog(request, blog_id):
    blog = get_object_or_404(models.Blog, id=blog_id)
    return render(request, 'blog/view_blog.html', {'blog': blog})
'''

## 2 : Ajoutez le gabarit pour la page de visualisation d’un billet
 
'''
# blog/templates/blog/view_blog.html
{% extends 'base.html' %}
{% block content %}
    <h2>{{ blog.title }}</h2>
    <img src="{{ blog.photo.image.url }}">
    <p>{{ blog.photo.caption }}</p>
    <p>{{ blog.content }}</p>
{% endblock content %}
'''

### 4- Récupérez les instances de Blogdans la vue home

'''
# blog/views.py
@login_required
def home(request):
    photos = models.Photo.objects.all()
    blogs = models.Blog.objects.all()
    return render(request, 'blog/home.html', context={'photos': photos, 'blogs': blogs})

'''

## 5 : Mettez à jour le gabarit home.html

'''
# blog/templates/blog/home.html
{% extends 'base.html' %}
{% block content %}
    ...
    <h2>Blog</h2>
    <div class="grid-container">
        {% for blog in blogs %}
            <div class="post">
                <a href="{% url 'view_blog' blog.id %}">
                    <h4>Billet : {{ blog.title }}</h4>
                    <img src="{{ blog.photo.image.url }}">
                </a>
            </div>
        {% endfor %}
    </div>
{% endblock content %}

'''

### Incluez plusieurs formulaires sur une page

'''
# blog/forms.py

class BlogForm(forms.ModelForm):
    edit_blog = forms.BooleanField(widget=forms.HiddenInput, initial=True)
    
    class Meta:
        model = models.Blog
        fields = ['title', 'content']
        
        
class DeleteBlogForm(forms.Form):
    delete_blog = forms.BooleanField(widget=forms.HiddenInput, initial=True)
    
'''

## 2 : Incluez les formulaires dans une vue
'''
# blog/views.py

@login_required
def edit_blog(request, blog_id):
    blog = get_object_or_404(models.Blog, id=blog_id)
    edit_form = forms.BlogForm(instance=blog)
    delete_form = forms.DeleteBlogForm()
    if request.method == 'POST':
        pass
    context = {
        'edit_form': edit_form,
        'delete_form': delete_form,
}
return render(request, 'blog/edit_blog.html', context=context)

'''

'''
@login_required
def edit_blog(request, blog_id):
    blog = get_object_or_404(models.Blog, id=blog_id)
    edit_form = forms.BlogForm(instance=blog)
    delete_form = forms.DeleteBlogForm()
    if request.method == 'POST':
        if 'edit_blog' in request.POST:
            edit_form = forms.BlogForm(request.POST, instance=blog)
            if edit_form.is_valid():
                edit_form.save()
                return redirect('home')
             if 'delete_blog' in request.POST:
                delete_form = forms.DeleteBlogForm(request.POST)
                if delete_form.is_valid():
                    blog.delete()
                    return redirect('home')
    context = {
        'edit_form': edit_form,
        'delete_form': delete_form,
}
return render(request, 'blog/edit_blog.html', context=context)

'''
## 3 : Ajoutez le gabarit

'''
# blog/templates/blog/edit_blog.html
{% extends 'base.html' %}
{% block content %}
    <h2>Modifier le billet</h2>
    <form method="post">
        {{ edit_form.as_p }}
        {% csrf_token %}
        <button type="submit" >Sauvegarder</button>
    </form>
    <hr>
    <h3>Supprimer le billet ?</h3>
    <form method="post">
        {{ delete_form }}
        {% csrf_token %}
        <button type="submit" >Supprimer</button>
    </form>
{% endblock content %}

'''

## 4 : Ajoutez le modèle d’URL

'''
# fotoblog/urls.py
urlpatterns = [
    …
    path('blog/<int:blog_id>/edit', blog.views.edit_blog, name='edit_blog'),
]
'''

## 5 : Ajoutez un lien vers la page de modification du billet

'''
# blog/templates/blog/view_blog.html
{% extends 'base.html' %}
{% block content %}
    <h2>{{ blog.title }}</h2>
    <p><a href="{% url 'edit_blog' blog.id %}">Modifier le billet</a></p>
    <img src="{{ blog.photo.image.url }}">
    <p>{{ blog.photo.caption }}</p>
    <p>{{ blog.content }}</p>
{% endblock content %}
'''

## 5 : Ajoutez un lien vers la page de modification du billet

'''
# blog/templates/blog/view_blog.html
{% extends 'base.html' %}
{% block content %}
    <h2>{{ blog.title }}</h2>
    <p><a href="{% url 'edit_blog' blog.id %}">Modifier le billet</a></p>
    <img src="{{ blog.photo.image.url }}">
    <p>{{ blog.photo.caption }}</p>
    <p>{{ blog.content }}</p>
{% endblock content %}

'''

# Etape  : Incluez plusieurs instances du même formulaire avec des ensembles de formulaires, ou formsets

# 1 :  : Créez un formset dans une vue avec  formset_factory 

'''
# blog/views.py
from django.forms import formset_factory

@login_required
def create_multiple_photos(request):
    PhotoFormSet = formset_factory(forms.PhotoForm, extra=5)
    formset = PhotoFormSet()
    if request.method == 'POST':
        formset = PhotoFormSet(request.POST, request.FILES)
        if formset.is_valid():
            for form in formset:
                if form.cleaned_data:
                    photo = form.save(commit=False)
                    photo.uploader = request.user
                    photo.save()
            return redirect('home')
    return render(request, 'blog/create_multiple_photos.html', {'formset': formset})
    
'''
# 2 : Créez le gabarit

'''
# blog/templates/blog/create_multiple_photos.html
{% extends 'base.html' %}
{% block content %}
    <h2>Télécharger plusieurs photos</h2>
    <form method="post" enctype="multipart/form-data">
        {{ formset.as_p }}
        {% csrf_token %}
        <button type="submit" >Publier</button>
    </form>
{% endblock content %}

'''

## Pour inclure un formset dans une page tout en gérant l’affichage de chaque formulaire, vous pouvez ajouter :
'''
# blog/templates/blog/create_multiple_photos.html
{% extends 'base.html' %}
{% block content %}
    <h2>Télécharger des photos</h2>
    <form method="post" enctype="multipart/form-data">
        {{ formset.management_form }}
        {% csrf_token %}
        {% for form in formset %}
            {{ form.as_p }}
        {% endfor %}
        <button type="submit" >Publier</button>
    </form>
{% endblock content %}

'''
# 3 : Ajoutez le modèle d’URL

'''
# fotoblog/urls.py
urlpatterns = [
    …
    path('photo/upload-multiple/', blog.views.create_multiple_photos,
    name='create_multiple_photos'),
]
'''
## 4 : Ajoutez un lien dans la barre latérale

'''
# templates/base.html
...
<p><a href="{% url 'photo_upload' %}">Télécharger une photo</a></p>
<p><a href="{% url 'create_multiple_photos' %}">Télécharger plusieurs photos</a></p>
<p><a href="{% url 'upload_profile_photo' %}">Changer la photo de profil</a></p>

'''